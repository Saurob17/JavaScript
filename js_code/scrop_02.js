//gloval srcope means variable can be accessed from anywhere in the code
var globalVar = "I am a global variable";

function checkGlobalScope() {
  console.log(globalVar); // Accessible here
}

checkGlobalScope();
console.log(globalVar); // Accessible here too

//local scope means variable can be accessed only within the function or block it is defined in
function localScopeExample() {
  var localVar = "I am a local variable"; //local scope and this is local variable
  console.log(localVar); // Accessible here
}

// not accessible here
// console.log(localVar); // Uncaught ReferenceError: localVar is not defined



function one() {
  const oneVar = "I am one var";

  function two() {
    const twoVar = "I am two var";
    console.log(oneVar); //accessible
  }
  two();
  // console.log(twoVar);//not accessible
}

// one();


// ‚úÖ Function Declaration (Hoisted)
console.log(addOne(5)); // Works fine because of hoisting

function addOne(num) {
  return num + 1;
}
// Output: 6

/*
üîπ ‡¶¨‡ßç‡¶Ø‡¶æ‡¶ñ‡ßç‡¶Ø‡¶æ:
Function Declaration ‡¶ï‡ßã‡¶°‡ßá‡¶∞ ‡¶Ü‡¶ó‡ßá ‡¶¨‡¶æ ‡¶™‡¶∞‡ßá ‡¶Ø‡ßá‡¶ï‡ßã‡¶®‡ßã ‡¶ú‡¶æ‡ßü‡¶ó‡¶æ ‡¶•‡ßá‡¶ï‡ßá ‡¶ï‡¶≤ ‡¶ï‡¶∞‡¶æ ‡¶Ø‡¶æ‡ßü‡•§
‡¶ï‡¶æ‡¶∞‡¶£ JavaScript execution ‡¶è‡¶∞ ‡¶Ü‡¶ó‡ßá ‡¶è‡¶á function ‡¶ü‡¶æ‡¶ï‡ßá hoist ‡¶ï‡¶∞‡ßá memory ‡¶§‡ßá ‡¶§‡ßÅ‡¶≤‡ßá ‡¶®‡ßá‡ßü‡•§
*/


// ‚ùå Function Expression (Not Hoisted)
console.log(addTwo(5)); // Error: addTwo is not a function

const addTwo = function (num) {
  return num + 2;
};

/*
üîπ ‡¶¨‡ßç‡¶Ø‡¶æ‡¶ñ‡ßç‡¶Ø‡¶æ:
‡¶è‡¶ü‡¶æ ‡¶è‡¶ï‡¶ü‡¶ø Function Expression‡•§
‡¶è‡¶ñ‡¶æ‡¶®‡ßá function ‡¶ü‡¶æ const variable ‡¶è‡¶∞ ‡¶Æ‡¶ß‡ßç‡¶Ø‡ßá assign ‡¶ï‡¶∞‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá‡•§
JavaScript ‡¶ï‡ßá‡¶¨‡¶≤ variable name ‚ÄòaddTwo‚Äô ‡¶ú‡¶æ‡¶®‡ßá, ‡¶ï‡¶ø‡¶®‡ßç‡¶§‡ßÅ function value ‡¶è‡¶ñ‡¶®‡ßã assign ‡¶π‡ßü‡¶®‡¶ø‡•§
‡¶§‡¶æ‡¶á declare ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶Ü‡¶ó‡ßá call ‡¶ï‡¶∞‡¶≤‡ßá error ‡¶¶‡ßá‡ßü‡•§
*/
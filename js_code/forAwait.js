/* 
===========================================
ЁЯза JavaScript Full Note: for await...of Loop
===========================================

ЁЯФ╣ 1я╕ПтГг ржХрзА ржПржЯрж╛?
----------------
ЁЯСЙ "for await...of" рж╣рж▓рзЛ ржПржХржЯрж┐ Asynchronous Loopред
ЁЯСЙ ржПржЯрж┐ ржПржоржи iterable object (ржпрзЗржоржи array, async generator) ржПрж░ ржЙржкрж░ ржХрж╛ржЬ ржХрж░рзЗ
   ржпрзЗржЧрзБрж▓рзЛрж░ value ржЧрзБрж▓рзЛ Promise ржЖржХрж╛рж░рзЗ ржЖрж╕рзЗред
ЁЯСЙ ржПржЗ рж▓рзБржк ржкрзНрж░рждрж┐ржЯрж┐ Promise resolve ржирж╛ рж╣ржУржпрж╝рж╛ ржкрж░рзНржпржирзНржд ржЕржкрзЗржХрзНрж╖рж╛ ржХрж░рзЗ,
   рждрж╛рж░ржкрж░ ржкрж░рзЗрж░ ржЖржЗржЯрзЗржорзЗ ржпрж╛рзЯред

-------------------------------------------------------
ЁЯФ╣ 2я╕ПтГг Syntax:
-------------------------------------------------------
async function example() {
   for await (const item of asyncIterable) {
       // ржПржЦрж╛ржирзЗ ржкрзНрж░рждрж┐ржЯрж┐ Promise resolve рж╣ржУрзЯрж╛рж░ ржкрж░ ржХрзЛржб ржЪрж▓ржмрзЗ
   }
}

ЁЯСЙ "await" keyword ржмрзНржпржмрж╣рж╛рж░ ржХрж░рж╛ ржпрж╛рзЯ рж╢рзБржзрзБржорж╛рждрзНрж░ async function ржПрж░ ржнрж┐рждрж░рзЗред

-------------------------------------------------------
ЁЯФ╣ 3я╕ПтГг Step-by-Step ржХрж╛ржЬрзЗрж░ ржзрж░ржи:
-------------------------------------------------------
1я╕ПтГг iterable object (ржпрзЗржоржи array) ржПрж░ ржкрзНрж░рждрж┐ржЯрж┐ ржЖржЗржЯрзЗржо ржпржжрж┐ Promise рж╣рзЯ,
2я╕ПтГг рж▓рзБржк ржкрзНрж░ржержо Promise resolve ржирж╛ рж╣ржУрзЯрж╛ ржкрж░рзНржпржирзНржд "await" ржХрж░рзЗ ржерзЗржорзЗ ржерж╛ржХрзЗ,
3я╕ПтГг resolve рж╣рзЯрзЗ ржЧрзЗрж▓рзЗ рждрж╛рж░ value variable ржП ржЖрж╕рзЗ,
4я╕ПтГг ржПрж░ржкрж░ ржкрж░рзЗрж░ Promise ржП ржпрж╛рзЯред
5я╕ПтГг рж╕ржмржЧрзБрж▓рзЛ Promise resolve рж╣рзЯрзЗ ржЧрзЗрж▓рзЗ рж▓рзБржк рж╢рзЗрж╖ рж╣рзЯред

-------------------------------------------------------
ЁЯФ╣ 4я╕ПтГг ржЙржжрж╛рж╣рж░ржг:
-------------------------------------------------------
async function getFruits() {
  const fruits = [
    Promise.resolve("ЁЯНО Apple"),
    Promise.resolve("ЁЯНМ Banana"),
    Promise.resolve("ЁЯен Mango")
  ];

  for await (const fruit of fruits) {
    console.log("Got:", fruit);
  }

  console.log("All fruits received!");
}

getFruits();

ЁЯСЙ Output:
Got: ЁЯНО Apple
Got: ЁЯНМ Banana
Got: ЁЯен Mango
All fruits received!

-------------------------------------------------------
ЁЯФ╣ 5я╕ПтГг ржХрзЗржи ржжрж░ржХрж╛рж░?
-------------------------------------------------------
тЬЕ ржПржХржЯрж╛рж░ ржкрж░ ржПржХржЯрж╛ asynchronous ржХрж╛ржЬ ржХрзНрж░ржорж╛ржирзБрж╕рж╛рж░рзЗ ржЪрж╛рж▓рж╛ржирзЛрж░ ржЬржирзНржп
тЬЕ ржпрзЗржоржи: ржПржХржЯрж╛рж░ ржкрж░ ржПржХржЯрж╛ API call, file read, database query
тЬЕ parallel execution (Promise.all) ржПрж░ ржкрж░рж┐ржмрж░рзНрждрзЗ serial execution ржПрж░ ржЬржирзНржп

-------------------------------------------------------
ЁЯФ╣ 6я╕ПтГг рж╕рж╛ржзрж╛рж░ржг ржнрзБрж▓:
-------------------------------------------------------
тЭМ async function ржЫрж╛рзЬрж╛ "for await...of" ржмрзНржпржмрж╣рж╛рж░ ржХрж░рж▓рзЗ error рж╣ржмрзЗред

for await (const x of arr) { console.log(x); }
// тЭМ SyntaxError: for await...of is only valid in async functions

тЬЕ ржарж┐ржХ ржЙржкрж╛рзЯ:
async function run() {
  for await (const x of arr) { console.log(x); }
}
run();

-------------------------------------------------------
ЁЯФ╣ 7я╕ПтГг Modern Feature (Top-Level Await):
-------------------------------------------------------
ЁЯСЙ ES Module (type="module" ржмрж╛ .mjs ржлрж╛ржЗрж▓) ржП async function ржЫрж╛рзЬрж╛ржУ ржмрзНржпржмрж╣рж╛рж░ ржХрж░рж╛ ржпрж╛рзЯ:

const promises = [Promise.resolve(1), Promise.resolve(2)];
for await (const p of promises) {
   console.log(p);
}

-------------------------------------------------------
ЁЯФ╣ 8я╕ПтГг Practical Example (API Fetch):
-------------------------------------------------------
async function fetchData() {
  const urls = [
    'https://jsonplaceholder.typicode.com/posts/1',
    'https://jsonplaceholder.typicode.com/posts/2'
  ];

  const requests = urls.map(url => fetch(url));

  for await (const response of requests) {
    const data = await response.json();
    console.log("Title:", data.title);
  }
}

fetchData();
*/
async function demo() {
  const promises = [
    Promise.resolve("тЬЕ Task 1 done"),
    Promise.resolve("тЬЕ Task 2 done"),
    Promise.resolve("тЬЕ Task 3 done")
  ];

  for await (const msg of promises) {
    console.log(msg);
  }

  console.log("ЁЯОЙ All tasks completed!");
}

demo();


/*

-------------------------------------------------------
ЁЯФ╣ 9я╕ПтГг Summary Table:
-------------------------------------------------------
| ржмрж┐рж╖рзЯ                     | ржмрж░рзНржгржирж╛ |
|---------------------------|----------------------------------|
| Loop Type                | Asynchronous Iterator Loop        |
| Keyword                  | for await...of                   |
| async function рж▓рж╛ржЧржмрзЗ?    | рж╣рзНржпрж╛ржБ (ES Module ржЫрж╛рзЬрж╛)           |
| Wait ржХрж░рзЗ                 | ржкрзНрж░рждрж┐ржЯрж┐ Promise resolve рж╣ржУрзЯрж╛ ржкрж░рзНржпржирзНржд |
| Use Case                 | Serial async ржХрж╛ржЬ, API call, file read |

-------------------------------------------------------
ЁЯФ╣ 10я╕ПтГг рж╕ржВржХрзНрж╖рж┐ржкрзНржд рж╕рж╛рж░рж╕ржВржХрзНрж╖рзЗржк:
-------------------------------------------------------
ЁЯСЙ "for...of" тАФ рж╕рж╛ржзрж╛рж░ржг value ржЧрзБрж▓рзЛрж░ ржЬржирзНржп (synchronous)
ЁЯСЙ "for await...of" тАФ Promise ржмрж╛ asynchronous value ржЧрзБрж▓рзЛрж░ ржЬржирзНржп
ЁЯСЙ ржкрзНрж░рждрж┐ржЯрж┐ async ржЕржкрж╛рж░рзЗрж╢ржирзЗрж░ ржлрж▓рж╛ржлрж▓ ржзрж╛рж░рж╛ржмрж╛рж╣рж┐ржХржнрж╛ржмрзЗ (serially) ржкрзЗрждрзЗ рж╕рж╛рж╣рж╛ржпрзНржп ржХрж░рзЗред
*/

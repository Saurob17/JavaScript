// =====================================
// ЁЯУж JavaScript Array Object (Full Note)
// =====================================

// ЁЯзй Array ржХрзА?
// ЁЯСЙ Array рж╣рж▓рзЛ ржПржХржзрж░ржирзЗрж░ list-like object, ржпрзЗржЦрж╛ржирзЗ ржПржХрж╛ржзрж┐ржХ value ржПржХрж╕рж╛ржерзЗ рж░рж╛ржЦрж╛ ржпрж╛рзЯред
// ЁЯСЙ Index ржжрж┐рзЯрзЗ ржкрзНрж░рждрж┐ржЯрж┐ ржорж╛ржирзЗ access ржХрж░рж╛ рж╣рзЯ (index рж╢рзБрж░рзБ рж╣рзЯ 0 ржерзЗржХрзЗ)ред

// ==========================
// ЁЯФ╣ рззя╕ПтГг Array рждрзИрж░рж┐ ржХрж░рж╛рж░ ржЙржкрж╛рзЯ
// ==========================

// тЬЕ 1. Array Literal (рж╕ржмржЪрзЗрзЯрзЗ рж╕рж╣ржЬ ржУ ржмрзНржпржмрж╣рзГржд ржкржжрзНржзрждрж┐)
let arr1 = [10, 20, 30];
console.log(arr1); 
// ржЖржЙржЯржкрзБржЯ: [10, 20, 30]

// тЬЕ 2. new Array() Constructor ржжрж┐рзЯрзЗ
let arr2 = new Array(10, 20, 30);
console.log(arr2); 
// ржЖржЙржЯржкрзБржЯ: [10, 20, 30]

// тЪая╕П ржХрж┐ржирзНрждрзБ ржпржжрж┐ рж╢рзБржзрзБ рззржЯрж╛ рж╕ржВржЦрзНржпрж╛ ржжрж╛ржУ, рж╕рзЗржЯрж╛ржХрзЗ "size" ржзрж░рзЗ ржирзЗрзЯ!
let arr3 = new Array(5);
console.log(arr3); 
// ржЖржЙржЯржкрзБржЯ: [ <5 empty items> ]  тЖТ рзлржЯрж╛ ржЦрж╛рж▓рж┐ ржЬрж╛рзЯржЧрж╛ (value ржирзЯ)

// тЬЕ 3. Array.of() тЖТ Confusion-free (ES6 ржерзЗржХрзЗ)
let arr4 = Array.of(10, 20, 30);
console.log(arr4); 
// ржЖржЙржЯржкрзБржЯ: [10, 20, 30]

let arr5 = Array.of(5);
console.log(arr5);
// ржЖржЙржЯржкрзБржЯ: [5] тЖТ ржПржЯрж╛ржХрзЗ рж╕ржмрж╕ржорзЯ value рж╣рж┐рж╕рзЗржмрзЗ ржирзЗрзЯ (size ржирзЯ)


// =======================================
// ЁЯФ╣ рзия╕ПтГг Array ржПрж░ ржнрж┐рждрж░рзЗ ржХрзА ржХрзА рж░рж╛ржЦрж╛ ржпрж╛рзЯ?
// =======================================

let mixedArray = [
  42, 
  "JavaScript", 
  true, 
  { name: "Saurob", age: 21 }, 
  [1, 2, 3], 
  function greet() { return "Hi!"; }
];
console.log(mixedArray);
// ржЖржЙржЯржкрзБржЯ: [42, "JavaScript", true, {...}, [1,2,3], ╞Т]


// ===================================
// ЁЯФ╣ рзйя╕ПтГг Array ржПрж░ ржЧрзБрж░рзБрждрзНржмржкрзВрж░рзНржг Properties
// ===================================

// ЁЯз╛ length тЖТ ржорзЛржЯ ржХрзЯржЯрж╛ element ржЖржЫрзЗ
console.log(arr1.length); // 3


// ===================================
// ЁЯФ╣ рзкя╕ПтГг Array Element Access & Update
// ===================================

let fruits = ["Apple", "Banana", "Mango"];
console.log(fruits[0]); // "Apple" (index 0)
console.log(fruits[2]); // "Mango"

// тЬЕ ржорж╛ржи ржкрж░рж┐ржмрж░рзНрждржи
fruits[1] = "Orange";
console.log(fruits); // ["Apple", "Orange", "Mango"]


// ===================================
// ЁЯФ╣ рзля╕ПтГг Array ржПрж░ Common Methods
// ===================================

// тЬЕ push() тЖТ рж╢рзЗрж╖рзЗ ржирждрзБржи item ржпрзЛржЧ ржХрж░рзЗ
fruits.push("Guava");
console.log(fruits); // ["Apple", "Orange", "Mango", "Guava"]

// тЬЕ pop() тЖТ рж╢рзЗрж╖ item ржорзБржЫрзЗ ржлрзЗрж▓рзЗ
fruits.pop();
console.log(fruits); // ["Apple", "Orange", "Mango"]

// тЬЕ unshift() тЖТ рж╢рзБрж░рзБрждрзЗ ржпрзЛржЧ ржХрж░рзЗ
fruits.unshift("Lichi");
console.log(fruits); // ["Lichi", "Apple", "Orange", "Mango"]

// тЬЕ shift() тЖТ рж╢рзБрж░рзБ ржерзЗржХрзЗ ржорзБржЫрзЗ ржлрзЗрж▓рзЗ
fruits.shift();
console.log(fruits); // ["Apple", "Orange", "Mango"]

// тЬЕ includes() тЖТ ржХрзЛржирзЛ ржорж╛ржи ржЖржЫрзЗ ржХрж┐ржирж╛ ржЪрзЗржХ ржХрж░рзЗ
console.log(fruits.includes("Mango")); // true

// тЬЕ indexOf() тЖТ ржХрзЛржирзЛ ржорж╛ржирзЗрж░ index ржЬрж╛ржирж╛рзЯ
console.log(fruits.indexOf("Orange")); // 1

// тЬЕ join() тЖТ рж╕ржм element string ржЖржХрж╛рж░рзЗ combine ржХрж░рзЗ
console.log(fruits.join(" - ")); // "Apple - Orange - Mango"


// ===================================
// ЁЯФ╣ рзмя╕ПтГг Array Slice & Splice
// ===================================

// тЬЕ slice(start, end) тЖТ ржЕржВрж╢ ржХрзЗржЯрзЗ ржирзЗрзЯ (ржорзВрж▓ array ржЕржкрж░рж┐ржмрж░рзНрждрж┐ржд ржерж╛ржХрзЗ)
let sliced = fruits.slice(0, 2);
console.log(sliced); // ["Apple", "Orange"]
console.log(fruits); // ["Apple", "Orange", "Mango"]

// тЬЕ splice(start, deleteCount, addItems) тЖТ ржЕржВрж╢ ржмрж╛ржж ржмрж╛ ржпрзЛржЧ ржХрж░рзЗ (ржорзВрж▓ array ржкрж░рж┐ржмрж░рзНрждрж┐ржд рж╣рзЯ)
fruits.splice(1, 1, "Papaya");
console.log(fruits); // ["Apple", "Papaya", "Mango"]





// ===================================
// ЁЯФ╣ рзня╕ПтГг Loop ржжрж┐рзЯрзЗ Array Traverse
// ===================================

// тЬЕ for loop
for (let i = 0; i < fruits.length; i++) {
  console.log(fruits[i]);
}

// тЬЕ for...of loop
for (let item of fruits) {
  console.log(item);
}

// тЬЕ forEach()
fruits.forEach((item, index) => {
  console.log(index, item);
});


// ===================================
// ЁЯФ╣ рзоя╕ПтГг Array Concatenation & Spread
// ===================================

let a = [1, 2];
let b = [3, 4];

let c = a.concat(b);
console.log(c); // [1, 2, 3, 4]

// тЬЕ Spread Operator (...)
let d = [...a, ...b];
console.log(d); // [1, 2, 3, 4]


// ===================================
// ЁЯФ╣ рзпя╕ПтГг Multidimensional Array
// ===================================

let matrix = [
  [1, 2, 3],
  [4, 5, 6],
  [7, 8, 9]
];
console.log(matrix[1][2]); // 6


// ===================================
// ЁЯФ╣ ЁЯФЯ Array vs Array.of() vs new Array()
// ===================================

console.log([5]);          // [5] тЖТ value рж╣рж┐рж╕рзЗржмрзЗ ржирзЗрзЯ
console.log(Array.of(5));  // [5] тЖТ рж╕ржмрж╕ржорзЯ value рж╣рж┐рж╕рзЗржмрзЗ ржирзЗрзЯ тЬЕ
console.log(new Array(5)); // [ <5 empty items> ] тЖТ size рж╣рж┐рж╕рзЗржмрзЗ ржирзЗрзЯ тЪая╕П


// ===================================
// ЁЯПБ Summary Table
// ===================================

/*
| ржмрзИрж╢рж┐рж╖рзНржЯрзНржп | [] | Array.of() | new Array() |
|------------|----------------|----------------|----------------|
| Introduced | ржкрзБрж░ржирзЛ | ES6 | ржкрзБрж░ржирзЛ |
| Syntax | [1,2,3] | Array.of(1,2,3) | new Array(1,2,3) |
| ржПржХржЯрж┐ржорж╛рждрзНрж░ рж╕ржВржЦрзНржпрж╛рзЯ ржЖржЪрж░ржг | [5] (value) | [5] (value) | [ <5 empty> ] (size) |
| Safe for numeric input | тЭМ ржирж╛ | тЬЕ рж╣рзНржпрж╛ржБ | тЭМ ржирж╛ |
| Typical Use | рж╕рж╛ржзрж╛рж░ржг value array | confusion-free array | fixed size array |
*/



//
